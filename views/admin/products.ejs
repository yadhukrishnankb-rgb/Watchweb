<%- include('../partials/admin/header') %>

<div class="flex-1 p-8">
  <div class="mb-6 flex justify-between items-center">
    <h1 class="text-2xl font-bold text-gray-800">Product Management</h1>
    <button onclick="openAddModal()"
      class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
      Add Product
    </button>
  </div>

  <!-- Search Bar -->
  <div class="mb-6">
    <form action="/admin/products" method="GET" class="flex gap-2">
      <input type="text"
        name="search"
        value="<%= searchQuery %>"
        placeholder="Search products..."
        class="flex-1 px-4 py-2 border rounded-lg">
      <button type="submit"
        class="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
        Search
      </button>
      <% if (searchQuery) { %>
        <a href="/admin/products"
          class="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600">
          Clear
        </a>
      <% } %>
    </form>
  </div>

  <!-- Products Table -->
  <div class="bg-white rounded-lg shadow overflow-hidden">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Image</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Category</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Price</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Stock</th>
          <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        <% if (products && products.length > 0) { %>
          <% products.forEach(product => { %>
            <tr data-product-id="<%= product._id %>">
              <td class="px-6 py-4 whitespace-nowrap">
                <img src="<%= product.productImage[0] %>"
                  alt="<%= product.productName %>"
                  class="h-16 w-16 object-cover rounded">
              </td>
              <td class="px-6 py-4 whitespace-nowrap"><%= product.productName %></td>
              <!-- <td class="px-6 py-4 whitespace-nowrap"><%= product.category.name %></td> -->

<!-- Replace the category cell with this -->
<td class="px-6 py-4 whitespace-nowrap">
    <%= product.category?.name || 'Uncategorized' %>
</td>

              <td class="px-6 py-4 whitespace-nowrap">
                <div>Regular: ₹<%= product.regularPrice %></div>
                <div>Sale: ₹<%= product.salesPrice %></div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap"><%= product.quantity %></td>
              <td class="px-6 py-4 whitespace-nowrap">
                <button onclick="openEditModal('<%= product._id %>')"
                  class="text-blue-600 hover:text-blue-900 mr-3">
                  Edit
                </button>
                <button onclick="confirmDelete('<%= product._id %>')"
                  class="text-red-600 hover:text-red-900">
                  Delete
                </button>
              </td>
            </tr>
          <% }); %>
        <% } else { %>
          <tr>
            <td colspan="6" class="px-6 py-4 text-center text-gray-500">
              No products found
            </td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <% if (totalPages > 1) { %>
    <div class="mt-6 flex justify-center">
      <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
        <% for(let i = 1; i <= totalPages; i++) { %>
          <a href="/admin/products?page=<%= i %><%= searchQuery ? '&search=' + searchQuery : '' %>"
            class="relative inline-flex items-center px-4 py-2 border text-sm font-medium
            <%= currentPage === i ? 'z-10 bg-blue-50 border-blue-500 text-blue-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50' %>">
            <%= i %>
          </a>
        <% } %>
      </nav>
    </div>
  <% } %>
</div>

<!-- Edit Product Modal -->
<div id="editModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
  <div class="relative top-20 mx-auto p-5 border w-[600px] shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <h3 class="text-lg leading-6 font-medium text-gray-900">Edit Product</h3>
      <form id="editProductForm" class="mt-4" enctype="multipart/form-data">
        <input type="hidden" id="editProductId" name="productId">
        <div class="grid grid-cols-2 gap-4">
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Product Name*</label>
            <input type="text" id="editProductName" name="productName" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Brand*</label>
            <input type="text" id="editBrand" name="brand" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Category*</label>
            <select id="editCategory" name="category" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
              <option value="">Select Category</option>
              <% categories.forEach(category => { %>
                <option value="<%= category._id %>"><%= category.name %></option>
              <% }); %>
            </select>
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Regular Price*</label>
            <input type="number" id="editRegularPrice" name="regularPrice" required min="0" step="0.01"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Sales Price*</label>
            <input type="number" id="editSalesPrice" name="salesPrice" required min="0" step="0.01"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Product Offer (%)</label>
            <input type="number" id="editProductOffer" name="productOffer" min="0" max="100"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Quantity*</label>
            <input type="number" id="editQuantity" name="quantity" required min="0"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Color*</label>
            <input type="text" id="editColor" name="color" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2">Description*</label>
          <textarea id="editDescription" name="description" required rows="3"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2">Current Images</label>
          <div id="editImagePreview" class="mt-2 flex gap-2"></div>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2">New Images (Optional, Min 3 Total)</label>
          <input type="file" name="productImages" multiple accept="image/*"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
            onchange="previewImages(event, 'editNewImagePreview')">
          <div id="editNewImagePreview" class="mt-2 flex gap-2"></div>
        </div>
        <div class="flex justify-end mt-6">
          <button type="button" onclick="closeEditModal()"
            class="mr-2 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">
            Cancel
          </button>
          <button type="submit"
            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
            Update Product
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Add Product Modal -->
<div id="addModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
  <div class="relative top-20 mx-auto p-5 border w-[600px] shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <h3 class="text-lg leading-6 font-medium text-gray-900">Add New Product</h3>
      <form id="addProductForm" class="mt-4" enctype="multipart/form-data">
        <div class="grid grid-cols-2 gap-4">
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Product Name*</label>
            <input type="text" name="productName" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Brand*</label>
            <input type="text" name="brand" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Category*</label>
            <select name="category" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
              <option value="">Select Category</option>
              <% categories.forEach(category => { %>
                <option value="<%= category._id %>"><%= category.name %></option>
              <% }); %>
            </select>
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Regular Price*</label>
            <input type="number" name="regularPrice" required min="0" step="0.01"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Sales Price*</label>
            <input type="number" name="salesPrice" required min="0" step="0.01"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Product Offer (%)</label>
            <input type="number" name="productOffer" min="0" max="100"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Quantity*</label>
            <input type="number" name="quantity" required min="0"
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
          <div class="mb-4">
            <label class="block text-gray-700 text-sm font-bold mb-2">Color*</label>
            <input type="text" name="color" required
              class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
          </div>
        </div>
        <div class="mb-4">
          <label class="block text-gray-700 text-sm font-bold mb-2">Description*</label>
          <textarea name="description" required rows="3"
            class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"></textarea>
        </div>
    
<div class="mb-4">
  <label class="block text-gray-700 text-sm font-bold mb-2">Images* (Min 3, Max 4)</label>
  <input type="file" 
         name="productImages" 
         required 
         multiple 
         accept="image/*"
         class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
         onchange="previewAndCropImages(event)">
  <div id="imagePreview" class="mt-2 flex gap-2"></div>
  <p class="text-sm text-gray-500 mt-1">Please select 3-4 images</p>
</div>


        <div class="flex justify-end mt-6">
          <button type="button" onclick="closeAddModal()"
            class="mr-2 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">
            Cancel
          </button>
          <button type="submit"
            class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
            Add Product
          </button>
        </div>
      </form>
    </div>
  </div>

</div>

<!-- Cropper Modal -->
<div id="cropperModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50">
  <div class="relative top-20 mx-auto p-5 border w-[800px] shadow-lg rounded-md bg-white">
    <div class="mt-3">
      <h3 class="text-lg leading-6 font-medium text-gray-900 mb-4">Crop Image</h3>
      <div class="mb-4">
        <div class="max-h-[400px] overflow-hidden">
          <img id="cropperImage" src="" alt="Image to crop">
        </div>
      </div>
      <div class="flex justify-end gap-2">
        <button type="button" onclick="closeCropperModal()"
          class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300">
          Cancel
        </button>
        <button type="button" onclick="cropImage()"
          class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
          Crop & Save
        </button>
      </div>
    </div>
  </div>
</div>









<script>
let cropper = null;
let currentFileInput = null;
let croppedImages = [];
let currentFiles = [];
let currentImageIndex = 0;

function resetCropState() {
  croppedImages = [];
  currentFiles = [];
  currentFileInput = null;
  currentImageIndex = 0;
  if (cropper) {
    cropper.destroy();
    cropper = null;
  }
}




function previewAndCropImages(event, previewId = 'imagePreview') {
    const files = event.target.files;
    const preview = document.getElementById(previewId);
    preview.innerHTML = '';

    if (files.length < 3 || files.length > 4) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Please select 3-4 images'
        });
        event.target.value = '';
        return;
    }

    currentFileInput = event.target;
    currentFiles = Array.from(files);
    currentImageIndex = 0;
    croppedImages = [];
    
    processNextImage(previewId);
}

function processNextImage(previewId) {
    if (currentImageIndex >= currentFiles.length) {
        return;
    }

    const file = currentFiles[currentImageIndex];
    const reader = new FileReader();

    reader.onload = function(e) {
        openCropperModal(e.target.result, () => {
            const preview = document.getElementById(previewId);
            const div = document.createElement('div');
            div.className = 'w-20 h-20 relative';
            
            const img = document.createElement('img');
            img.src = croppedImages[currentImageIndex];
            img.className = 'w-full h-full object-cover rounded';
            
            div.appendChild(img);
            preview.appendChild(div);
            
            currentImageIndex++;
            processNextImage(previewId);
        });
    };
    
    reader.readAsDataURL(file);
}

function openCropperModal(imageSrc, callback) {
    const modal = document.getElementById('cropperModal');
    const image = document.getElementById('cropperImage');
    
    modal.classList.remove('hidden');
    image.src = imageSrc;
    
    if (cropper) {
        cropper.destroy();
    }
    
    cropper = new Cropper(image, {
        aspectRatio: 1,
        viewMode: 2,
        dragMode: 'move',
        background: true,
        responsive: true,
        modal: true,
        guides: true,
        highlight: true,
        cropBoxMovable: true,
        cropBoxResizable: true,
        toggleDragModeOnDblclick: true,
    });

    window.currentCropCallback = callback;
}

function closeCropperModal() {
    const modal = document.getElementById('cropperModal');
    modal.classList.add('hidden');
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
}

function cropImage() {
    if (!cropper) return;

    const canvas = cropper.getCroppedCanvas({
        width: 800,
        height: 800
    });

    canvas.toBlob(async (blob) => {
        const url = URL.createObjectURL(blob);
        croppedImages.push(url);

        // Create a new file from blob
        const fileName = `cropped-${Date.now()}.jpg`;
        const croppedFile = new File([blob], fileName, {
            type: 'image/jpeg',
            lastModified: Date.now()
        });

  // Update the files in the input
  const dataTransfer = new DataTransfer();
        currentFiles.forEach((file, index) => {
            if (index === currentImageIndex) {
                dataTransfer.items.add(croppedFile);
            } else {
                dataTransfer.items.add(file);
            }
        });
        currentFileInput.files = dataTransfer.files;

        closeCropperModal();
        if (window.currentCropCallback) {
            window.currentCropCallback();
        }
    }, 'image/jpeg', 0.8);
}


document.querySelectorAll('input[type="file"][name="productImages"]').forEach(input => {
    input.addEventListener('change', (e) => previewAndCropImages(e, e.target.closest('form').querySelector('.image-preview').id));
});
//-----------------------------------------------------------


function openAddModal() {
  resetCropState();
  document.getElementById('addModal').classList.remove('hidden');
  document.getElementById('addProductForm').reset();
  document.getElementById('imagePreview').innerHTML = '';
}

function closeAddModal() {
  document.getElementById('addModal').classList.add('hidden');
  document.getElementById('addProductForm').reset();
  document.getElementById('imagePreview').innerHTML = '';
  resetCropState();
}

function closeEditModal() {
  document.getElementById('editModal').classList.add('hidden');
  document.getElementById('editProductForm').reset();
  document.getElementById('editImagePreview').innerHTML = '';
  document.getElementById('editNewImagePreview').innerHTML = '';
  resetCropState();
}

async function openEditModal(productId) {
  try {
    const response = await fetch(`/admin/products/${productId}`);
    const data = await response.json();

    if (data.success) {
      const product = data.product;
      document.getElementById('editProductId').value = product._id;
      document.getElementById('editProductName').value = product.productName;
      document.getElementById('editBrand').value = product.brand;
      document.getElementById('editCategory').value = product.category._id;
      document.getElementById('editRegularPrice').value = product.regularPrice;
      document.getElementById('editSalesPrice').value = product.salesPrice;
      document.getElementById('editProductOffer').value = product.productOffer;
      document.getElementById('editQuantity').value = product.quantity;
      document.getElementById('editColor').value = product.color;
      document.getElementById('editDescription').value = product.description;

      const imagePreview = document.getElementById('editImagePreview');
      imagePreview.innerHTML = product.productImage
        .map(img => `
          <div class="w-20 h-20 relative">
            <img src="${img}" class="w-full h-full object-cover rounded">
          </div>
        `).join('');

      document.getElementById('editModal').classList.remove('hidden');
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: data.message
      });
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: 'Error loading product details'
    });
  }
}

function confirmDelete(productId) {
  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, delete it!'
  }).then((result) => {
    if (result.isConfirmed) {
      deleteProduct(productId);
    }
  });
}

async function deleteProduct(productId) {
  try {
    const response = await fetch(`/admin/products/${productId}`, {
      method: 'DELETE'
    });

    const data = await response.json();

    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Deleted!',
        text: data.message,
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        const row = document.querySelector(`tr[data-product-id="${productId}"]`);
        if (row) row.remove();
      });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: data.message
      });
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: 'Error deleting product'
    });
  }
}


document.getElementById('addProductForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    // Get the file input
    const fileInput = e.target.querySelector('input[name="productImages"]');
    if (!fileInput.files || fileInput.files.length < 3 || fileInput.files.length > 4) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Please select 3-4 images'
        });
        return;
    }

    const formData = new FormData(e.target);

    try {
        const response = await fetch('/admin/products', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: data.message,
                showConfirmButton: false,
                timer: 1500
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'Error adding product'
        });
    }
});





document.getElementById('editProductForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const formData = new FormData(e.target);
  const productId = document.getElementById('editProductId').value;

  const imageInput = e.target.querySelector('input[name="productImages"]');
  const existingImages = document.getElementById('editImagePreview').children.length;
  const newImages = imageInput.files.length;

  if (existingImages + newImages < 3 && newImages > 0) {
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: 'Total images must be at least 3'
    });
    return;
  }

  try {
    const response = await fetch(`/admin/products/${productId}`, {
      method: 'PUT',
      body: formData
    });

    const data = await response.json();

    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: data.message,
        showConfirmButton: false,
        timer: 1500
      }).then(() => {
        window.location.reload();
      });
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: data.message
      });
    }
  } catch (error) {
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: 'Error updating product'
    });
  }
});
</script>

<%- include('../partials/admin/footer') %>